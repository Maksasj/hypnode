package gen;

import java_cup.runtime.*;
import org.hypnode.ast.*;
import java.util.*;

// Identifier and primitive types
terminal String             			IDENTIFIER;

// Literals
terminal String             			STRING_LITERAL;
terminal String             			NUMBER_LITERAL;
terminal String             			CHARACTER_LITERAL;
terminal Boolean            			BOOLEAN_LITERAL;

// Operators
terminal								EQUAL, LEFT_ARROW, BOLD_RIGHT_ARROW, PIPE;

// Punctuation
terminal								SEMI, COLON, COMMA, DOT, L_PAREN, R_PAREN, L_CURLY_PAREN, R_CURLY_PAREN, L_SQUARE_PAREN, R_SQUARE_PAREN;

// Keywords
terminal								LET, TYPE, NODE;

// Attribute keywords
terminal String							OPTIONAL, REQUIRED, TRIGGER, EXPORT, IMPORT;

// Comments
terminal String                         SINGLE_LINE_COMMENT;

// Non terminals
non terminal Program 					program;
non terminal List<IDefinition>			definition_list;

non terminal TypeDefinition				type_definition;
non terminal String						type_declaration;
non terminal ITypeImplementation 		type_implementation;
non terminal List<ITypeImplementation>  union_type_implementation;
non terminal List<FieldDefinition>		field_definition_list;
non terminal FieldDefinition			field_definition;

non terminal NodeDefinition				node_definition;
non terminal NodeDeclaration			node_declaration;
non terminal List<INodeAttribute>		node_attribute_list;
non terminal List<PortDefinition> 		port_definition_list;
non terminal PortDefinition 			port_definition;
non terminal IPortAttribute 			port_attribute;
non terminal List<IPortAttribute>		port_attribute_list;
non terminal INodeAttribute				node_attribute;
non terminal INodeImplementation		node_implementation;

non terminal List<IStatement>			statement_definition_list;
non terminal IStatement					statement_definition;
non terminal NodeInstanceStatement		node_instance;
non terminal NodeConnectionStatement	node_connection;

non terminal FieldAccess				field_access;
non terminal List<String>				identifier_accesss_list;

non terminal String						type;

start with program;

program ::= 
	definition_list
	;

definition_list ::= 
	definition_list:list type_definition:def
	{: list.add(def); RESULT = list; :} 
	|
	definition_list:list node_definition:def
	{: list.add(def); RESULT = list; :} 
	|
	{: RESULT = new ArrayList<IDefinition>(); :}
;

type_definition ::= type_declaration:decl EQUAL type_implementation:impl SEMI;
type_declaration ::= TYPE IDENTIFIER;

type_implementation ::= 
	L_CURLY_PAREN field_definition_list R_CURLY_PAREN 
	| 
	type_implementation L_SQUARE_PAREN R_SQUARE_PAREN
	|
	L_PAREN type_implementation PIPE type_implementation R_PAREN
	| 
	IDENTIFIER
;

field_definition_list ::= 
	field_definition_list field_definition
	|
;

field_definition ::= IDENTIFIER COLON type_implementation SEMI;

node_definition ::= 
	node_attribute_list node_declaration EQUAL node_implementation
;

node_attribute_list ::=
	node_attribute_list node_attribute
	|
;

node_attribute ::= 
	EXPORT L_PAREN STRING_LITERAL R_PAREN
;

node_declaration ::= 
	NODE IDENTIFIER L_PAREN port_definition_list R_PAREN BOLD_RIGHT_ARROW L_PAREN port_definition_list R_PAREN
;

port_definition_list ::= 
	port_definition_list port_definition
	|
;

port_definition ::= port_attribute_list IDENTIFIER COLON type_implementation COMMA
;

port_attribute_list ::=
	port_attribute_list port_attribute
	|
;

port_attribute ::= 
	OPTIONAL 
	|
 	REQUIRED 
	| 
	TRIGGER L_PAREN IDENTIFIER R_PAREN
;

node_implementation ::= 
	L_CURLY_PAREN statement_definition_list R_CURLY_PAREN 
	| 
	IMPORT L_PAREN STRING_LITERAL R_PAREN
;

statement_definition_list ::= 
	statement_definition_list statement_definition
	|
;
statement_definition ::= 
	node_instance
	|
	node_connection
;

node_instance ::= 
	LET IDENTIFIER COLON IDENTIFIER SEMI
;

node_connection ::= 
	field_access LEFT_ARROW field_access SEMI
;

field_access ::= 
	IDENTIFIER
;
