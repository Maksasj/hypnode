type MyStruct = {
    a: i32;
    b: i32;
};

node mylog (@required message: string = "Hello world") => () = @import("std_experimental_log")

@export("entrypoint")
node main (argc: i32, argv: string[]) => () = {
    let l: mylog;
    l.message <- 0;
    l.message <- 0 as Error;

    let side: side_effect;
    side.message <- "Do stuff"; # This number literall we treat like a default port value

    let ok: handle_ok;
    ok.result <- (side.result as Message); # Type casting
    
    let error: handle_error;
    error.error <- (side.result as Error);
}

node loop (@required l: i32 = 0) => (lo: i32) = {
    let log: mylog;
    let s: sum;

    s.a <- l;
    s.b <- 1; # This number literall we treat like a default port value
    
    l <- s.c;
    log.message <- s.c;
}

# Example with default port values
node fib(ins: FibState = { a: 0, b: 1 }) => (ous: FibState) = {
    let s: sum;
    s.a <- ous.a;
    s.b <- ous.b;

    ous.a <- ins.b;
    ous.b <- s.c;
}

node some() => () = {
    s.a <- ({ a: ({ a: false, b: ({ a: ({ a: ("This is a string literall" as string), b: ({ a: true, b: ({ a: ({ a: ("This is a string literall" as string), b: 1 } as any), b: 1 } as any) } as any) } as any), b: 1 } as any) } as any), b: ({ a: ({ a: ("This is a string literall" as string), b: 1 } as any), b: 1 } as any) } as any);
}