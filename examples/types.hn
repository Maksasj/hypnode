type MyStruct = {
    a: i32;
    b: i32;
};

type A = { field: string; };
type B = { value: i32; };

type AB = A | B;
type AB2 = (A | B);
type ABA = (A | B)[];
type CoolUnion = ByteArray[] | string | any;

type Some = {
    field: {
        child: ((((((((((any | Some[])[][] | B)))))))) | A);
        child2: ((any | (any | Some[])[][])[][] | (any | Some[])[][])[];
        child2: A[] | {
            hahah: (any | Some[])[][];
        };
    };
    var: AB[];
};

type C = {
    value: bool;
    var: AB;
};

type Array = any[];

type Byte = u8;

type ByteArray = Byte[]; 

type Real = f64;
type Matrix = Real[][];

type Model = {
    a: Matrix[];
    name: {
        a: Matrix[];
        name: {
            a: Matrix[];
            name: {
                a: Matrix[];
                name: {
                    a: Matrix[];
                        name: {
                        a: Matrix[];
                        name: string;
                    };
                };
            };
        };
    };
};

type Pointer = u64;

node mylog (@required message: any,) => () = @import("std_experimental_log")

@export("entrypoint")
node main (argc: i32, argv: string[],) => () = {
    let l: mylog;
    l <- argv;
}
