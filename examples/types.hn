type MyStruct = {
    a: i32;
    b: i32;
};

type A = {
    field: string;
};

type B = {
    value: i32;
};

type AB = (A | B);

type C = {
    value: bool;
    var: AB;
};

type Real = f64;

type Array = any[];

type Byte = u8;

type ByteArray = Byte[]; 

type Matrix = Real[][];

type Model = {
    a: Matrix[];
    name: string;
};

type CoolUnion = ((ByteArray[] | string) | any);

type Pointer = u64;

node mylog (@required message: any,) => () = @import("std_experimental_log")

@export("entrypoint")
node main (argc: i32, argv: string[],) => () = {
    let l: mylog;
    l <- argv;
}
